syntax = "proto3";
package blob;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";

option go_package = "github.com/celestiaorg/celestia-app/x/blob/types";

// Msg defines the blob Msg service.
service Msg {
  // PayForBlob allows the user to pay for the inclusion of a message
  rpc PayForBlob(MsgPayForBlob) returns (MsgPayForBlobResponse) {
    option (google.api.http).get = "/celestia/blob/payforblob";
  }
}

// BlobTx wraps an encoded sdk.Tx with a second field to contain a blob of data.
// The raw bytes of the blob are not signed over, instead we verify the blob
// using the MsgPayForBlob that is signed over in the encoded sdk.Tx.
message BlobTx {
  bytes tx = 34; // we use arbitrarily large field numbers here to reduce the probability of field collisions in protobuf
  repeated bytes blobs = 57;
}

// MsgPayForBlob is what gets signed by users when creating
// ShareCommitSignatures.
//  Multiple versions are signed and included, each version creates a commitment
//  for a
// specific square size.
message MsgPayForBlob {
  string signer = 1;
  bytes namespace_id = 2;
  uint64 blob_size = 3;
  // share_commitment is the share_commitment from
  // ShareCommitAndSignature that will be included in a block
  bytes share_commitment = 4;
}

// MsgPayForBlobResponse describes the response returned after the submission
// of a PayForBlob
message MsgPayForBlobResponse {}
